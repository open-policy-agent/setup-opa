name: Test Setup OPA

on:
  push:
    branches:
      - main
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        version: ["<0.38", "0.37.1", "latest", "edge"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup opa
        uses: ./
        with:
          version: ${{ matrix.version }}
          static: ${{ matrix.os == 'macos-latest' }}

      - name: Get expected version
        run: |
          if [ "${{ matrix.version }}" = "<0.38" ]; then
            export EXPECTED_VERSION=v0.37.2
          elif [ "${{ matrix.version }}" = "0.37.1" ]; then
            export EXPECTED_VERSION=v0.37.1
          else
            # get the latest version info from the github api
            export EXPECTED_VERSION=$(curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/open-policy-agent/opa/releases/latest | jq -r .name )
          fi
          if [ "${{ matrix.version }}" = "edge" ]; then
            export EXPECTED_VERSION="$(echo $EXPECTED_VERSION | awk -F. '{print $1"."$2+1".0-dev"}')"
          fi
          echo "Expected version for ${{ matrix.version }}: $EXPECTED_VERSION"
          echo "EXPECTED_VERSION=$EXPECTED_VERSION" >> $GITHUB_ENV
      - name: Capture version installed
        run: |
          echo "VERSION_INSTALLED=$( opa version | head -1 | sed 's/Version: /v/' )" >> $GITHUB_ENV
      - name: Verify
        shell: bash
        run: |
          if [ "$EXPECTED_VERSION" != "$VERSION_INSTALLED" ]; then
            echo "Unexpected version, expected $EXPECTED_VERSION, got: $VERSION_INSTALLED"
            exit 1;
          fi
          exit 0;

